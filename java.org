#+TITLE: Java 基础

* 日期与时间
** Date 类
这是 java 最开始就有的类，用来处理时间。
#+BEGIN_SRC java
// 获取当前时间
Date now = new Date();
// 打印时间，显式格式为 Thu Nov 03 16:31:56 CST 2016
System.out.println(now);
// 获取时间中的年、月、日等
System.out.println(now.getYear()); // 注意，这样得到的是一个减去了 1990 的年份。
// 得到从 1970 年到现在经过的毫秒数
System.out.println(now.getTime());
// 所以得到两个时间相差多少一般这样表示
long duration = date1.getTime() - date2.getTime();

// 得到指定日期的时间
Date time1 = new Date(12212221);
Date time2 = new Date("19900202");
Date time3 = new Date(1990, 1, 14);  // 注意，月份从0开始计算。1这条语句表示 1990年2月14日
// 通过 SimpleDateFormat 的形式得到指定格式的日期
Date time4 = new SimpleDateFormat("yyyyMMdd").parse("20050205");

#+END_SRC

** Calendar 类

后来由于 Date 类在处理国际化方面的一些局限，现在推荐用 Calendar 类代替 Date 类。
#+BEGIN_SRC java
// 获取当前时间
Calendar c = Calendar.getInstance();
// 通过 getTime 获得 Date 对象。通过下面语句，打印当前时间
System.out.println(c.getTime());
// 通过下面语句，获取年月日等
System.out.println(c.get(Calendar.YEAR));

// 通过下面语句，初始化一个具体时间
c.set(1999, 2, 4);
// 或者通过时间类型得到
c.setTime(new Date());
// 或者，通过直接实例化一个 Calendar 的实现类：
Calendar cc = new GregorianCalendar(1998,3,11);
// 下面语句得到 1970 年来的 long 值
System.out.println(cc.getTimeInMillis);

#+END_SRC


** Date <--> String 的转换

SimpleDateFormat:
#+BEGIN_SRC java
  // 自行补充
#+END_SRC

注意，SimpleDateFormat 不是线程安全的!

*** 其它

通过以上代码看以看到，通过 calendar.setTime()/getTime() 方法可以实现 Date/Calendar 对象的转换。

另外，为了方便， System 下面有个静态方法，也可以获取 1970 年到现在过了多少毫秒，返回时 long 值：、
: System.currentTimeMillis();
这个非常常用。



* getter/setter

#+BEGIN_SRC java
  @Test
  public void testGetterDate() throws Exception {
      Author author = new Author();
      author.setName("张三");
      author.setBirth(new SimpleDateFormat("yyyy-MM-dd").parse("1993-04-14"));
      
      System.out.println("用户创建成功。");
      
      // 接下来获取年龄，有如下方式：

      // 第一种写法：
      System.out.println("1. 年龄：" + (new Date().getYear() - author.getBirth().getYear()));

      // 第二种方法，创建一个静态方法，通过调用，获取年龄：
      System.out.println("2. 年龄：" + BirthUtil.calAge(author.getBirth()));

      // 第三种，在 author 类中，增加年龄字段。因为年龄也是人的一个属性。
      // 这样能更好的体现面向对象的思想：封装。
      // 因为年龄跟生日有关系，所以不需要显式赋值，如果想获取，那么通过下面的方式：
      System.out.println("3. 年龄：" + author.getAge());
  }


  // 在 getter 方法中，可以写一些具体的逻辑。
  // 这里通过生日的字段，计算年龄。当调用这个 getter 方法的时候，才开始计算。
  // 而年龄这个值，不需要保存到数据库中。所以上面需要增加一个 @Transient 注解，将其排出在外。
  // 这种处理方式，是非常常见的。尤其在 getter/setter 方法中，添加自己的逻辑，有时候，会使代码变得便捷。
  class Author {
      private int age;
      // ... others
      public int getAge() {
          return age == 0 ? BirthUtil.calAge(birth) : age;
      }
  }


  // 根据生日计算年龄的静态方法
  class BirthUtil {
      public static int calAge(Date birth) {
          Calendar cal = Calendar.getInstance();
          int now = cal.get(Calendar.YEAR);
          cal.setTime(birth);
          return now - cal.get(Calendar.YEAR);
      }
  }

#+END_SRC

