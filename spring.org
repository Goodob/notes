#+TITLE: Spring

* Spring

* Spring MVC
** 创建 MVC 项目基本步骤

第一步，创建 Gradle 项目，在 build.gradle 增加相关依赖
#+BEGIN_SRC java
  apply plugin: 'java'
  apply plugin: 'war'

  // 指定 Java 版本
  sourceCompatibility = 1.8

  // 配置下载 jar 包的地址
  repositories {
    jcenter()
    mavenCentral()
  }

  // 配置需要的 jar 包依赖
  dependencies {

    // 定义两个局部变量
    // 这里代表我们需要的 hibernate 和 spring 的版本
    def hibernateVersion = "5.1.0.Final"
    def springVersion = "4.3.5.RELEASE"

    // 在 test 中需要用到的 jar 包
    testCompile (
      "junit:junit:4.12"
    )

    // 指明 Tomcat 上已经自带的 jar 包，这样发布的时候才不会重复
    providedCompile (
      "javax:javaee-web-api:7.0",
    )

    // 配置我们项目需要用到的所有 jar 包，即 compile 环节需要的 jar 包
    compile (

      // 本地的 OJDBC 包加入进来，要改成自己的路径
      files("E:/SSH/lib_hibernate/ojdbc7.jar"),

      // 用来管理数据源的知名 jar 包
      "c3p0:c3p0:0.9.1.2",

      // jsp 中 jstl 标签的支持 jar 包
      "javax.servlet:jstl:1.2",

      // log4j 日志支持的 jar 包
      "log4j:log4j:1.2.17",

      // 配置 hibernate
      "org.hibernate:hibernate-core:$hibernateVersion",

      // 配置 spring
      "org.springframework:spring-web:$springVersion",
      "org.springframework:spring-orm:$springVersion",
      "org.springframework:spring-webmvc:$springVersion",
      "com.fasterxml.jackson.core:jackson-databind:2.5.1"
    )
  }


  // 为编译器配置编码，防止某些情况下编译出现乱码的情况
  // 相应的，我们所有的代码应该保存成 UTF-8 格式
  tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
  }


  // 自定义任务，将工程所需要的 jar 包拷贝到项目下的 lib 文件夹下
  // 需要手动执行这个 task 才会有效果。这是为了方便导出 jar 包
  task copyJars(type: Copy) {
    // 指明我们导出的是 compile 和 test 所依赖的 jar 包
    from configurations.compile, configurations.testCompile
    // 指明导出到 "lib" 文件夹下
    into "lib"
  }
#+END_SRC

第二步，配置 web.xml，加入 spring 和 mvc 支持
#+BEGIN_SRC xml
  <!-- 配置 spring 的 root application context (parent) -->
  <!-- 在 spring mvc 中，这个配置是可选的 -->
  <!-- 在这个 IOC 容器里，主要配置一些全局的东西 -->
  <!-- 比如 dao/service 的依赖，声明式事务之类 -->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  <!-- 配置路径，默认是 "WEB-INF/applicationContext.xml" -->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:spring-root.xml</param-value>
  </context-param>


  <!-- 配置 SpringMVC 的 DispatcherServlet  context (child) -->
  <!-- 这个必须要配置，它的父容器是 上面的那个 -->
  <servlet>
    <servlet-name>miniblog</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <!-- 指定配置文件路径，可选 -->
    <!-- 默认文件是 "WEB-INF/miniblog-dispatcher.xml" -->
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:spring-miniblog.xml</param-value>
    </init-param>
    <!-- 可以指定 tomcat 启动的时候，自动初始化 DispatcherServlet -->
    <!-- 如果没有这个配置，会在第一次访问的时候才会去创建 -->
    <load-on-start>1</load-on-start>
  </servlet>
  <servlet-mapping>
    <servlet-name>miniblog</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping>

#+END_SRC

第三步，配置 spring 的 context 文件，如 spring-miniblog.xml
#+BEGIN_SRC xml

  <!-- 注意，要引入正确的命名空间！！！ -->

  <!-- mvc 版本的 context:annotation-driven -->
  <!-- 针对 mvc 增加了一些其他支持，需要开启 -->
  <mvc:annotation-driven />

  <!-- 配置扫描发现所有具有 @Controller 注解的类，加载到容器 -->
  <context:component-scan base-package="app.controller" />

  <!-- 配置视图解析器，将 Controller 返回的字符串组织成全路径 -->
  <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
    <property name="prefix" value="/WEB-INF/view/" />
    <property name="suffix" value=".jsp" />
  </bean>

  <!-- 配置静态资源的访问映射 -->
  <!-- 比如访问 http://localhost/js/jquery.js，mvc 将会去寻找 /assets/javascript/jquery.js -->
  <mvc:resources mapping="/js/**"  location="/assets/javascript/" />
  <mvc:resources mapping="/css/**" location="/assets/stylesheet/" />

#+END_SRC

第四步，建立 Controller，进行测试
#+BEGIN_SRC java
  @Controller
  @RequestMapping("/users")
  class UserController {

      @RequestMapping("/{name}")
      public String show(@PathVariable String name, Model model) {
          model.add("name", name);
          return "show";    // 返回的是 "/WEB-INF/view/show.jsp" 页面
      }
  }
#+END_SRC

** Parameters
*** 基本类型的自动绑定
会根据 handler 参数列表中的字段名字，自动绑定数据

如果参数没有被赋值，默认会尝试将 null 赋予它。所以对于一些 int 之类的类型，会抛出 IllegalStateException 异常。

*** 集合类型的自动绑定
*** 对象的自动封装
#+BEGIN_SRC html
  <!-- form -->
  <form action="/greeting">
    <input type="text" name="name" placeholder="请输入名字" />
    <input type="text" name="age" placeholder="请输入年龄" />
    <input type="submit">
  </form>
#+END_SRC

#+BEGIN_SRC java
  // handler
  @RequestMapping("/greeting")
  public String greeting(User user) {
      return "greeting";
  }

  // model
  Class User {
      private String name;
      private int age;
  }
#+END_SRC

*** HttpSession/HttpServletRequest 等的自动绑定
: public String greeting(HttpServletRequest r, HttpSession s)

*** @RequestParam
定制入参的名字和默认值等
: public String greeting(@RequestParam(name = "username", defaultValue = "xyz") String name)

*** @RequestAttribute
将 request 的某个 Attribute 值，赋予 handler 参数
: public String greeting(@RequestAttribute(name = "name") String name)

*** @CookieValue
用来绑定 cookie 中的值

*** @RequestHeader
绑定 http 请求头部的信息到参数中
: public String greeting(@RequestHeader(name = "user-agent") String ua)

*** @PathVariable
绑定 url 中匹配的串到参数中，用 {} 匹配
: @RequestMapping("/greeting/{id}")
: public String greeting(@PathVariable int id)

*** @RequestBody
将 http 请求 body 里的数据自动转换并绑定到参数。

*** @ResponseBody
忽略头部，直接将内容作为响应体返回。

示例：

#+BEGIN_SRC js
  $("#showmsg").click(function () {
      d = {"name": "xiaohui", "age": 9};
      $.ajax({
          method: 'post',
          url: '/greeting',
          data: JSON.stringify(d),
          contentType: 'application/json',
          success: function (o) {
              console.log(o);  // 得到的是 json 对象
              alert(eee.age);
              alert(eee.name);
          }
      });
  });
#+END_SRC

UserController:
#+BEGIN_SRC java
  @RequestMapping("/greeting")
  @ResponseBody
  public User greeting(@RequestBody User user) {
      System.out.println("又过了一个新年！");
      int age = user.getAge();
      user.setAge(age + 1);
      return user;
  }
#+END_SRC

*** @SessionAttribute
*** @ModelAttribute
*** Errors/BindingResult
用来绑定出错的信息

*** Model/View/ModelAndView

** 请求流程
当请求被 DispatcherServlet 拦截，会在 doService 里面完成所有的处理逻辑。

处理的大致流程是这样的：
1. 预处理
2. 根据请求的 URL 通过 HandlerMapping 获取匹配的 Controller 和 handler
3. 创建 ModelAndView 对象，这个对象将会保存所有的模型数据，还会持有页面展现相关的信息
   : ModelAndView mv = null
4. 调用相应的 handler 方法，将结果封装成 ModelAndView 赋值给 mv。
5. 调用 render 方法，将 Model 里的数据渲染到 View 视图里
6. 清理工作

所以我们需要明白，我们的 handler 最终产生的应该是一个保存了数据和视图的 ModelAndView。
即使我们的 handler 返回类型是字符串或其他，到最后还是被封装成了 ModelAndView。

而且在封装 ModelAndView 时，会将 handler 参数列表上的数据自动添加到里面。

我们可以在 jsp 里，对 ModelAndView 里的所有数据通过 el 表达式或 spring 标签进行获取。

** Validation(表单验证)
三种方法：
*** 最基本的校验
几个重要的概念
- 一个接口 Errors/BindingResult，用来保存绑定错误信息。
- 两个方法 errors.reject() / errors.rejectValue()，用来注册全局/字段级别的错误信息
- 一个标签 <form:errors path="*" />

例子，首先，在页面上：
#+BEGIN_SRC html
  <form:form action="/users/create" modelAttribute="user">
    <ul class="errorTip">
      <form:errors path="*" cssClass="error" element="li" />
    </ul>
    <div>
      <form:input path="name" />
      <form:errors path="name" cssClass="error" element="div" />
    </div>
    <div>
      <form:input type="number" path="age" />
      <form:errors path="age" cssClass="error" element="p" />
    </div>
    <input type="submit" value="注册" />
  </form:form>
#+END_SRC

然后，可以在 Controller 中的 handler 里进行校验，添加错误信息
#+BEGIN_SRC java
  @Controller
  @RequestMapping("/users")
  class UserController {

      @RequestMapping("/create")
      public String create(User user, Errors errors) {

          // 校验名字
          if(user.getName() == null || empty(user.getName())) {
              errors.rejectValue("name", null, "名字不能为空");
          }

          // 校验年龄
          if(user.getAge() < 18) {
              errors.rejectValue("age", null, "年龄太小了，18R");
          }

          // 全局检验的例子
          if(user.getName().equals("admin")) {
              errors.reject(null, "你是谁？");
          }


          // 如果有校验错误，返回相应错误页面
          if(errors.hasErrors())
              return "regist";

          // 如果没有错误，返回的页面
          return "greeting";
      }
  }
#+END_SRC

这样，就可以了。这种方法是基于 handler 的，优点是定义方便，缺点是不便于复用。

*** 自定义验证器

首先，自定义我们的验证器，只需要实现 Validator 接口即可。
#+BEGIN_SRC java
  public class UserValidator implements Validator {

      // 要来校验验证的类
      @Override
      public boolean supports(Class<?> clazz) {
          return clazz.equals(User.class);
      }

      // 写我们的校验逻辑，把相关错误注册到 errors 里面
      @Override
      public void validate(Object target, Errors errors) {
          User user = (User) target;
          if(user.getName() == null || user.getName().length() < 3) {
              errors.rejectValue("name", null, "名字不能为空，而且必须要大于 3 位");
          }

          if(user.getAge() < 18 ) {
              errors.rejectValue("age", null, "年龄必须要大于 18 岁哦");
          }
      }
  }
#+END_SRC

其次，需要注册我们的验证器。

可以注册到当前的 Controller 里面，
#+BEGIN_SRC java
  // 放到 Controller 里面，这样会在 handler 执行之前被执行
  @InitBinder
  protected void init (DataBinder binder) {
      binder.setValidator(new UserValidator());
  }
#+END_SRC

也可以在 spring-mvc.xml 配置里注册成全局的验证器。
#+BEGIN_SRC xml
  <mvc:annotation-driven validator="userValidator" />
  <bean name="userValidator" class="fish.miniblog.validator.UserValidator" />
#+END_SRC

最后，就可以在所需要验证的参数前面加上 @Validated 注解，来实现参数的自动校验了。

*** JSR-303 风格校验
JSR-303 是 java 官方推出的一套 Validation 接口。

hibernate 给出了一个完整实现。

首先，如果想使用 JSR-303 的校验风格，需要引入相应的包：
: complie "org.hibernate:hibernate-validator:5.4.0.Final"

其次，添加我们的验证逻辑。需要在我们的 model bean 上添加相关注解：
#+BEGIN_SRC java
  public class User {
      @NotNull
      @Size(min = 3, max = 10)
      private String name;

      @Range(min = 10, max = 100)
      private int age;
  }
#+END_SRC

再次，要保证在我们的 spring-mvc.xml 中存在:
: <mvc:annotation-driven />

最后，使用，只要在 Controller 的相关字段上添加 @Valid 注解即可。
#+BEGIN_SRC java
  public String create(@Valid User user, Errors errors) {
      // 其他的使用跟上面是一致的.
  }
#+END_SRC

** PropertyEditor/Convertor/Formater(日期转换为例)
*** 第一种方法：利用内置的 CustomDateEditor
首先，在我们的 Controller 的 InitBinder 里面，注册 CustomEditor
#+BEGIN_SRC java
  @InitBinder
  public void init (WebDataBinder binder) {
      CustomDateEditor dateEditor = new CustomDateEditor(new SimpleDateFormat("yyyy-MM-dd"), true);
      binder.registerCustomEditor(Date.class, dateEditor);                                );
  }
#+END_SRC

然后，就可以正常转换了。

*** 第二种方法：实现自定义转换器
spring 3.0 之后，使用 converter

#+BEGIN_SRC java
  public class MyDateConverter implements Converter<String, Date> {
      public Date convert(String datestr) {
          // 自己去实现，将字符串转换为 Date 对象。
          // 注意考虑异常处理等
          return null;
      }
  }
#+END_SRC

然后需要在配置文件中注册转换器
#+BEGIN_SRC xml
  <!-- 配置我们定义的转换服务 -->
  <mvc:annotation-driven conversion-service="myConversionService" />

  <!-- 定义全局的转换服务，可以配置多个转换器 -->
  <!-- 在这里，只配置了我们自定义的转换器，DateConverter -->
  <bean name="myConversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">
    <property name="converters">
      <set>
        <bean class="fish.miniblog.converter.MyDateConverter" />
      </set>
    </property>
  </bean>

#+END_SRC

这样就可以了。所有的 yyyy-MM-yy 之类的字符串就可以正常转换成 Date 对象了。

*** 第三种方法：使用 @DateTimeFormat 注解
在 model 上，增加相应注解：
#+BEGIN_SRC java
  class User {
    @DateTimeFormat(pattern = "yyyy-MM-dd")
    private Date birthday;
  }
#+END_SRC

就可以了。

另外，如果想让返回的 JSON 对象中能够准确处理时间类型，需要用到 @JsonFormat 注解

*** 日期在页面上的显示
暂缺。

** Exception(异常处理)

SpringMVC 中默认的异常处理器是 DefaultHandlerExceptionResolver，
但它只是简单粗暴地将异常栈在页面上进行显示。
在实际项目中这种处理是不合适的。
所以，我们需要自己定制我们自己的异常处理方式。

自定义异常，主要有下面两种方法：
*** HandlerExceptionResolver

这是 SpringMVC 中所有异常处理器的总接口。
要实现自己的异常处理，就是要继承这个接口，实现自己的处理器：
#+BEGIN_SRC java
  public class MyExceptionResolver implements HandlerExceptionResolver {
      @Override
      public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) {

          ModelAndView mv = new ModelAndView();

          if(ex instanceof MyException) {
              mv.addObject("err", ex);
              mv.setModelName("error");
          } else {
              // ... 其他各种情况
          }

          return mv;
      }
  }
#+END_SRC

然后，在 springmvc.xml 中注册为 bean 即可。
#+BEGIN_SRC xml
  <bean class="fish.miniblog.MyExceptionResolver" />
#+END_SRC


当然，如果每次异常处理都需要自己定义 ExceptionResovler，很麻烦。
所以，spring 给我们提供了一个简单的默认实现，SimpleMappingExceptionResolver。
如果需要，只需要在 springmvc.xml 中注册即可：
#+BEGIN_SRC xml
  <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
    <!-- 如果有异常，最后由 error.jsp 页面来显示错误信息  -->
    <property name="defaultErrorView"   value="error" />
    <!-- 在 error.jsp 中，使用 ${err} 来获取异常信息 -->
    <property name="exceptionAttribute" value="err" />

    <property name="exceptionMappings">
      <!-- 暂缺 -->
    </property>
  </bean>
#+END_SRC


*** @ExceptionHandler 注解

可以定义一个类似于普通 handler 的方法，添加 @ExceptionHandler 将其作为一个异常处理方法
#+BEGIN_SRC java
  @Controller
  @ControllerAdvice
  public class ExceptionController {

      @ExceptionHandler({YourException.class})
      public ModelAndView hahaha (Exception e) {
          ModelAndView mv = new ModelAndView("error");
          mv.addObject("err", e);
          return mv;
      }

      @ExceptionHandler
      public String hahaha (MyException e) {
          return "index";
      }
  }

#+END_SRC

默认只是 Controller 范围内有效的。

Spring 3 之后增加了一个 @ControllerAdvice 注解，作用在控制器上。
它会将其中所有的 @ExceptionHandler、@InitBinder、@ModelAttribute 等全局化。

所以，一般情况下，我们可以将所有 @ExceptionHandler 方法统一放置在一个加了 @ControllerAdvice 的控制器里，实现全局异常。

就酱紫，没什么好说的。

** Interceptor(拦截器)
拦截器主要用来增强 handler 方法

拦截器的接口有两个，定义拦截器就是实现他们之一
- HandlerInterceptor      参数比较多，能够更全面控制拦截行为
- WebRequestInterceptor   针对 Web 请求精简了参数列表，主要用来控制 request/ModelAndView/Exception

主要实现以下三个方法:
- preHandler()       在执行 Controller 相应 handler 之前要执行
- postHandler()      执行完 handler，进入 render 页面渲染前的阶段执行
- afterCompletion()  所有的东西都做完，退出前执行。主要用来做一些清理工作

下面是例子:

*定义*
#+BEGIN_SRC java
  // 实现 HandlerInterceptor 接口的形式
  public class MyInterceptor implements HandlerInterceptor {
      @Override
      public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
          // 在调用 handler 之前被调用
          // 如果返回 true，继续下面的流程，如果返回 false，直接跳转到 afterComplete 中止运行。
          return true;
      }

      @Override
      public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {
          // 在调用完 handler 得到封装好的 ModelAndView 之后，渲染页面前被调用
          // 在这里，可以对 ModelAndView 里的数据作出自己的修改等
      }

      @Override
      public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {
          // 在最后的清理阶段被调用
          // 在这里，进行善后操作。
      }
  }


  // 实现 WebRequestInterceptor 接口的形式
  public class HisInterceptor implements WebRequestInterceptor {
      @Override
      public void preHandle(WebRequest request) throws Exception {
          System.out.println("pre");
      }

      @Override
      public void postHandle(WebRequest request, ModelMap model) throws Exception {
          System.out.println(model);
      }

      @Override
      public void afterCompletion(WebRequest request, Exception ex) throws Exception {
          System.out.println(ex);
      }
  }


#+END_SRC

*注册*
#+BEGIN_SRC xml
  <mvc:interceptors>
    <!-- 全局拦截器 -->
    <bean class="fish.miniblog.interceptor.YourInterceptor" />
    <bean class="fish.miniblog.interceptor.MyInterceptor" />

    <!-- 作用于指定映射的拦截器 -->
    <mvc:interceptor>
      <!-- 为所有 /users/** 请求配置拦截器 -->
      <mvc:mapping path="/users/**"/>
      <bean class="fish.miniblog.interceptor.HisInterceptor" />
    </mvc:interceptor>

  </mvc:interceptors>
#+END_SRC

然后，就这样了。

** MessageSource(国际化，资源文件)

使用资源文件，实现国际化。

如果使用资源文件，只需要自定义我们自己的资源文件处理器，即实现 MessageSource 接口。

但 spring 提供了一些实现好的处理器，我们只需要注册使用，比如，ReloadableResourceBundleMessageSource：
#+BEGIN_SRC xml
  <bean class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
    <!-- 指定我们的资源文件为class根目录下的 message.properties 文件 -->
    <property name="basename" value="message" />
  </bean>
#+END_SRC

在 message[.zh_CN].properties 里面定义 k/v 形式的信息。
: MY_NAME = GODMAN
: NAME.ERROR = 名字错误

然后，就可以使用了。比如：
: <fmt:message key="MY_NAME" />
再比如，在 JSR-303 验证里：
: @NotNull(message = "NAME.ERROR")
在自定义验证器里:
: errors.rejectValue("name", "NAME.ERROR")

就这样。。。简单。

* RESTful Style

RESTful (Representational State Transfer) 一种 web 架构风格。

它将网络上存在的每件东西都抽象成了一种“资源”。
而我们访问网络的过程就是对某种“资源”的访问和控制。

比如，网络上某个地方存在一本书，这本书的 URL 资源地址就是：
: theremoteserver.com/books/战争与和平

如果我们想对这本书（这个资源）进行处理，可以把这个 URL 和 相关的 http 协议方法（GET/POST/PUT/DELETE）发送给服务器，比如，要删除：
: DELETE theremoteserver.com/books/战争与和平

在 HTTP 协议中，定义了很多不同的请求方法，比如我们熟悉的 GET/POST。
除了这两个，还有其他一些，这些请求方法是具备语义的，分别对应数据的 CRUD：
- GET    从网络上获取资源，用来显示
- POST   用来在网络上增加一个资源
- PUT    用来更新网络上某个资源的信息
- DELETE 用来发送删除某个资源的指令

在 RESTful 里，充分利用了这些请求方法，结合资源 URL，完成了对资源的操作处理。

[[http://stackoverflow.com/questions/671118/what-exactly-is-restful-programming][这篇帖子很有用]]

*** 应用示例

post 代表一条微博，它是存在于网络上的资源。

所有微博的 url 为：
: localhost/posts

某条微博的 url 为：
: localhost/posts/223

按照 RESTful 风格，我们可以将 Mapping 设计为：
| 功能         | URL                | 请求的方法 |
| 显示所有微博 | localhost/posts    | GET        |
| 增加一条微博 | localhost/posts    | POST       |
| 显示某条微博 | localhost/posts/11 | GET        |
| 更新某条微博 | localhost/posts/11 | PUT        |
| 删除某条微博 | localhost/posts/11 | DELETE     |

当然，还需要额外两个映射
| 功能                   | URL                     | 请求的方法 |
| 跳转到添加微博页面     | localhost/posts/edit    | GET        |
| 跳转到编辑某条微博页面 | localhost/posts/11/edit | POST       | 

设计完这些后，我们就可以在 SpringMVC 里面，结合 @PathVariable 进行编程了。

而这种风格，展现了它的清晰和简单的性质。


