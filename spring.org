#+TITLE: Spring

* Spring

* Spring MVC
** 基本步骤

第一步，创建 Gradle 项目，在 build.gradle 增加相关依赖
#+BEGIN_SRC java
  apply plugin: 'java'
  apply plugin: 'war'

  // 指定 Java 版本
  sourceCompatibility = 1.8

  // 配置下载 jar 包的地址
  repositories {
    jcenter()
    mavenCentral()
  }

  // 配置需要的 jar 包依赖
  dependencies {

    // 定义两个局部变量
    // 这里代表我们需要的 hibernate 和 spring 的版本
    def hibernateVersion = "5.1.0.Final"
    def springVersion = "4.3.5.RELEASE"

    // 在 test 中需要用到的 jar 包
    testCompile (
      "junit:junit:4.12"
    )

    // 指明 Tomcat 上已经自带的 jar 包，这样发布的时候才不会重复
    providedCompile (
      "javax:javaee-web-api:7.0",
    )

    // 配置我们项目需要用到的所有 jar 包，即 compile 环节需要的 jar 包
    compile (

      // 本地的 OJDBC 包加入进来，要改成自己的路径
      files("E:/SSH/lib_hibernate/ojdbc7.jar"),

      // 用来管理数据源的知名 jar 包
      "c3p0:c3p0:0.9.1.2",

      // jsp 中 jstl 标签的支持 jar 包
      "javax.servlet:jstl:1.2",

      // log4j 日志支持的 jar 包
      "log4j:log4j:1.2.17",

      // 配置 hibernate
      "org.hibernate:hibernate-core:$hibernateVersion",

      // 配置 spring
      "org.springframework:spring-web:$springVersion",
      "org.springframework:spring-orm:$springVersion",
      "org.springframework:spring-webmvc:$springVersion",
      "com.fasterxml.jackson.core:jackson-databind:2.5.1"
    )
  }


  // 为编译器配置编码，防止某些情况下编译出现乱码的情况
  // 相应的，我们所有的代码应该保存成 UTF-8 格式
  tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
  }


  // 自定义任务，将工程所需要的 jar 包拷贝到项目下的 lib 文件夹下
  // 需要手动执行这个 task 才会有效果。这是为了方便导出 jar 包
  task copyJars(type: Copy) {
    // 指明我们导出的是 compile 和 test 所依赖的 jar 包
    from configurations.compile, configurations.testCompile
    // 指明导出到 "lib" 文件夹下
    into "lib"
  }
#+END_SRC

第二步，配置 web.xml，加入 spring 和 mvc 支持
#+BEGIN_SRC xml
  <!-- 配置 spring 的 root application context (parent) -->
  <!-- 在 spring mvc 中，这个配置是可选的 -->
  <!-- 在这个 IOC 容器里，主要配置一些全局的东西 -->
  <!-- 比如 dao/service 的依赖，声明式事务之类 -->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  <!-- 配置路径，默认是 "WEB-INF/applicationContext.xml" -->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:spring-root.xml</param-value>
  </context-param>


  <!-- 配置 SpringMVC 的 DispatcherServlet  context (child) -->
  <!-- 这个必须要配置，它的父容器是 上面的那个 -->
  <servlet>
    <servlet-name>miniblog</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <!-- 指定配置文件路径，可选 -->
    <!-- 默认文件是 "WEB-INF/miniblog-dispatcher.xml" -->
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:spring-miniblog.xml</param-value>
    </init-param>
    <!-- 可以指定 tomcat 启动的时候，自动初始化 DispatcherServlet -->
    <!-- 如果没有这个配置，会在第一次访问的时候才会去创建 -->
    <load-on-start>1</load-on-start>
  </servlet>
  <servlet-mapping>
    <servlet-name>miniblog</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping>

#+END_SRC

第三步，配置 spring 的 context 文件，如 spring-miniblog.xml
#+BEGIN_SRC xml

  <!-- 注意，要引入正确的命名空间！！！ -->

  <!-- mvc 版本的 context:annotation-driven -->
  <!-- 针对 mvc 增加了一些其他支持，需要开启 -->
  <mvc:annotation-driven />

  <!-- 配置扫描发现所有具有 @Controller 注解的类，加载到容器 -->
  <context:component-scan base-package="app.controller" />

  <!-- 配置视图解析器，将 Controller 返回的字符串组织成全路径 -->
  <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
    <property name="prefix" value="/WEB-INF/view/" />
    <property name="suffix" value=".jsp" />
  </bean>

  <!-- 配置静态资源的访问映射 -->
  <!-- 比如访问 http://localhost/js/jquery.js，mvc 将会去寻找 /assets/javascript/jquery.js -->
  <mvc:resources mapping="/js/**"  location="/assets/javascript/" />
  <mvc:resources mapping="/css/**" location="/assets/stylesheet/" />

#+END_SRC

第四步，建立 Controller，进行测试
#+BEGIN_SRC java
  @Controller
  @RequestMapping("/users")
  class UserController {

      @RequestMapping("/{name}")
      public String show(@PathVariable String name, Model model) {
          model.add("name", name);
          return "show";    // 返回的是 "/WEB-INF/view/show.jsp" 页面
      }
  }
#+END_SRC

** Parameters
*** 基本类型的自动绑定
会根据 handler 参数列表中的字段名字，自动绑定数据

如果参数没有被赋值，默认会尝试将 null 赋予它。所以对于一些 int 之类的类型，会抛出 IllegalStateException 异常。

*** 集合类型的自动绑定
*** 对象的自动封装
#+BEGIN_SRC html
  <!-- form -->
  <form action="/greeting">
    <input type="text" name="name" placeholder="请输入名字" />
    <input type="text" name="age" placeholder="请输入年龄" />
    <input type="submit">
  </form>
#+END_SRC

#+BEGIN_SRC java
  // handler
  @RequestMapping("/greeting")
  public String greeting(User user) {
      return "greeting";
  }

  // model
  Class User {
      private String name;
      private int age;
  }
#+END_SRC

*** HttpSession/HttpServletRequest 等的自动绑定
: public String greeting(HttpServletRequest r, HttpSession s)

*** @RequestParam
定制入参的名字和默认值等
: public String greeting(@RequestParam(name = "username", defaultValue = "xyz") String name)

*** @RequestAttribute
将 request 的某个 Attribute 值，赋予 handler 参数
: public String greeting(@RequestAttribute(name = "name") String name)

*** @CookieValue
用来绑定 cookie 中的值

*** @RequestHeader
绑定 http 请求头部的信息到参数中
: public String greeting(@RequestHeader(name = "user-agent") String ua)

*** @PathVariable
绑定 url 中匹配的串到参数中，用 {} 匹配
: @RequestMapping("/greeting/{id}")
: public String greeting(@PathVariable int id)

*** @RequestBody
将 http 请求 body 里的数据自动转换并绑定到参数。

*** @ResponseBody
忽略头部，直接将内容作为响应体返回。

示例：

#+BEGIN_SRC js
  $("#showmsg").click(function () {
      d = {"name": "xiaohui", "age": 9};
      $.ajax({
          method: 'post',
          url: '/greeting',
          data: JSON.stringify(d),
          contentType: 'application/json',
          success: function (o) {
              console.log(o);  // 得到的是 json 对象
              alert(eee.age);
              alert(eee.name);
          }
      });
  });
#+END_SRC

UserController:
#+BEGIN_SRC java
  @RequestMapping("/greeting")
  @ResponseBody
  public User greeting(@RequestBody User user) {
      System.out.println("又过了一个新年！");
      int age = user.getAge();
      user.setAge(age + 1);
      return user;
  }
#+END_SRC

*** Model/View/ModelAndView

** Handler 返回值
- String
- View
- ModelAndView
- void
- JSON

** Validation(表单验证)
三种方法：
*** 最基本的校验
几个重要的概念
- 一个接口 Errors/BindingResult，用来保存绑定错误信息。
- 两个方法 errors.reject() / errors.rejectValue()，用来注册全局/字段级别的错误信息
- 一个标签 <form:errors path="*" />

例子，首先，在页面上：
#+BEGIN_SRC html
  <form:form action="/users/create" modelAttribute="user">
    <ul class="errorTip">
      <form:errors path="*" cssClass="error" element="li" />
    </ul>
    <div>
      <form:input path="name" />
      <form:errors path="name" cssClass="error" element="div" />
    </div>
    <div>
      <form:input type="number" path="age" />
      <form:errors path="age" cssClass="error" element="p" />
    </div>
    <input type="submit" value="注册" />
  </form:form>
#+END_SRC

然后，可以在 Controller 中的 handler 里进行校验，添加错误信息
#+BEGIN_SRC java
  @Controller
  @RequestMapping("/users")
  class UserController {

      @RequestMapping("/create")
      public String create(User user, Errors errors) {

          // 校验名字
          if(user.getName() == null || empty(user.getName())) {
              errors.rejectValue("name", null, "名字不能为空");
          }

          // 校验年龄
          if(user.getAge() < 18) {
              errors.rejectValue("age", null, "年龄太小了，18R");
          }

          // 全局检验的例子
          if(user.getName().equals("admin")) {
              errors.reject(null, "你是谁？");
          }


          // 如果有校验错误，返回相应错误页面
          if(errors.hasErrors())
              return "regist";

          // 如果没有错误，返回的页面
          return "greeting";
      }
  }
#+END_SRC

这样，就可以了。这种方法是基于 handler 的，优点是定义方便，缺点是不便于复用。

*** 自定义验证器

首先，自定义我们的验证器，只需要实现 Validator 接口即可。
#+BEGIN_SRC java
  public class UserValidator implements Validator {

      // 要来校验验证的类
      @Override
      public boolean supports(Class<?> clazz) {
          return clazz.equals(User.class);
      }

      // 写我们的校验逻辑，把相关错误注册到 errors 里面
      @Override
      public void validate(Object target, Errors errors) {
          User user = (User) target;
          if(user.getName() == null || user.getName().length() < 3) {
              errors.rejectValue("name", null, "名字不能为空，而且必须要大于 3 位");
          }

          if(user.getAge() < 18 ) {
              errors.rejectValue("age", null, "年龄必须要大于 18 岁哦");
          }
      }
  }
#+END_SRC

其次，需要注册我们的验证器。

可以注册到当前的 Controller 里面，
#+BEGIN_SRC java
  // 放到 Controller 里面，这样会在 handler 执行之前被执行
  @InitBinder
  protected void init (DataBinder binder) {
      binder.setValidator(new UserValidator());
  }
#+END_SRC

也可以在 spring-mvc.xml 配置里注册成全局的验证器。
#+BEGIN_SRC xml
  <mvc:annotation-driven validator="userValidator" />
  <bean name="userValidator" class="fish.miniblog.validator.UserValidator" />
#+END_SRC

最后，就可以在所需要验证的参数前面加上 @Validated 注解，来实现参数的自动校验了。

*** JSR-303 风格校验
JSR-303 是 java 官方推出的一套 Validation 接口。hibernate 给出了一个完整实现。

首先，如果想使用 JSR-303 的校验风格，需要引入相应的包：
: complie "org.hibernate:hibernate-validator:5.4.0.Final"

其次，添加我们的验证逻辑。需要在我们的 model bean 上添加相关注解：
#+BEGIN_SRC java
  public class User {
      @NotNull
      @Size(min = 3, max = 10)
      private String name;

      @Range(min = 10, max = 100)
      private int age;
  }
#+END_SRC

再次，要保证在我们的 spring-mvc.xml 中存在:
: <mvc:annotation-driven />

最后，使用，只要在 Controller 的相关字段上添加 @Valid 注解即可。
#+BEGIN_SRC java
  public String create(@Valid User user, Errors errors) {
      // 其他的使用跟上面是一致的.
  }
#+END_SRC


** ExceptionHandler(异常处理)
** Interceptor(拦截器)
** Convertor(自定义类型转换)
** REStful 风格

