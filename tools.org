#+TITLE: 常用工具


* Emacs 常用命令
1. 保存
   Ctrl-x Ctrl-s

2. 生成 html
   Ctrl-C Ctrl-e h h

3. 复制
   Alt-W


* 版本控制工具之 GIT

Git 是一个版本控制工具，它能实现团队中的代码协作开发，在代码同步和管理方面功能强大、理念先进。

Git 是当下最流行的分布式版本控制工具，轻量级，但功能强大，由 linux 之父 linus 开发。它的使用特别广泛，尤其开源社区基本都用它作为版本控制工具。我们每个人也要尽量掌握它。

而网站 github.com 是基于 git 工具的一个代码托管网站，目前基本所有知名的开源项目都选择把代码部署到这个网站。这里的代码包罗万象，是个学习的天堂。实属居家旅行、杀人拿塔的必备网站。

我们自己的 github 主页是 [[https://github.com/s126][github.com/s126]]， 大家可以直接用浏览器访问。另外笔记的项目为 [[https://github.com/s126/notes][github.com/s126/notes]]， 直接查看oracle笔记内容的话是 [[https://github.com/s126/notes/oracle.org][github.com/s126/notes/oracle.org]]。 如果想用 git 工具下载同步代码，方法如下：
#+BEGIN_SRC sh

# 1. 进入 git bash，切换到相应目录，比如，e 盘下的 course 目录：
cd /e/course/

# 2. 如果是第一次下载，执行以下命令
git clone https://github.com/s126/notes.git

# 3. 如果不是第一次下载，只是更新代码，执行以下命令。
# ps. 要经常运行这个命令，保持与服务器的同步
cd /e/course/notes/
git pull

#+END_SRC

这是 Git 的一个教程，大家有时间可以按照上面的看看、练练，以后务必掌握基本用法： [[http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000][Git 廖雪峰 教程]]




下面总结了一下常用的基本命令：
#+BEGIN_SRC sh

## 修改 .gitconfig 文件，这是 git 的配置文件
vi ~/.gitconfig 

## 初始化 版本库
git init
git init-db

## 添加忽略文件。这个文件控制，哪些文件不要被提交
echo "*.svn" > .gitignore

## 将改变增加至索引
git add .

## 从索引写入到库
git commit -m "提交到版本库"
git commit -a -m "提交，连同所有未 add 的修改文件"
git commit --amend -a -m "替换最后一次的提交信息"

## 查看修改了什么东西
git diff
git diff --cached
git status

## 回撤版本，重新提交。后悔药。
git reset HEAD^           # 回撤到上一版本，默认是 --mix 形式，另有 --soft 和 --hard 形式
git status                # 可以看到，上一版本提交的文件没有增加到 index 的状态
git add/commit...         # 做完处理后，重新提交


## 查看日志，历史记录
git show
git log
git log --pretty=oneline  # 定制 log 的显示样式
git log -2 -p             # 显示最近两次提交的详细信息
git log --stat --summary  # 简要显示每次更新的统计信息（提交过那些文件，有多少行修改）

## 增加/查看/切换/删除 分支
git branch                # 查看分支
git branch s126           # 创建分支 s126
git checkout s126         # 切换到分支 s126
git checkout -b tmp       # 创建并切换到分支 tmp
git branch -D tmp         # 删除分支 tmp

## 合并工作到主分支(s126 -> master)
git checkout master       # 切换到主分支
git merge HEAD s126       # 将 s126 的最新版本合并到当前分支
git pull . s126           # 相当于 git fetch && git merge

## 生成并应用补丁，这是另外一个合并工作的方法。暂时不需要搞太清楚。
git format-patch master > A.patch
git checkout master       # 先生成补丁文件，再切换到分支目录
git apply A.patch         # 应用补丁文件到当前分支
git add/commit...         # 然后提交修改


## 下载/上传/更新 信息到指定版本库
git clone git://192.168.1.1/repo.git
git push git://192.168.1.1/repo.git s126:master
git pull git://192.168.1.1/repo.git master:s126
git fetch public

## 其他命令：
git tag                   # 将某个版本做个标记，即赋予一个好记的名字
git gc                    # 垃圾收集，能大大减小版本库大小
git repack                # 同上，也能大大减小版本库大小
git ls-tree HEAD          # 查看版本库中的文件结构，下面语句是跟 awk 合作，打印整个目录结构
git ls-tree -r HEAD | awk '{print $4}' > d:/home/index/repTree
git whatchanged           # 显示某个版本改变了哪些文件
git show-branch           # 显示分支变动情况
git reflog                # 显示所有变更历史(跟 git log 不同)
git clone                 # 相当于 git init && git fetch
git pull                  # 相当于 git fetch && git merge
git rebase                # git merge 外，合并仓库的另一种形式


## 下面的例子是建立一个纯仓库，并作为开发的中心仓库（即 GIT 服务端）
git clone --bare /workspace/hnpmi /repo/s126.git   # 创建一个新的纯仓库，用于备份、共享
cd /workspace/s126                                 # 这是我们的工作目录
git remote add origin /repo/s126.git               # 将刚才新建的仓库添加为h我们的远程分支
git push origin master                             # 本地的 master 分支有更新，同步到远程分支
#+END_SRC


* 依赖管理工具之 Maven
以下是在 eclipse 中创建一个 maven 项目的步骤。

1. 新建 Maven 项目: File -> New -> Maven Project
2. 选择 maven-archetype-webapp 类型
3. 填写相应的名称等，完成创建。
4. 添加相关依赖，即修改 pom.xml，增加:
   #+BEGIN_SRC xml
   <dependency>
     <groupId>junit</groupId>
     <artifactId>junit</artifactId>
     <version>4.12</version>
     <scope>test</scope>
   </dependency>

   <dependency>
     <groupId>org.apache.struts</groupId>
     <artifactId>struts2-core</artifactId>
     <version>2.3.30</version>
   </dependency>

   <dependency>
     <groupId>log4j</groupId>
     <artifactId>log4j</artifactId>
     <version>1.2.17</version>
   </dependency>
   #+END_SRC

5. 将项目添加到 tomcat，运行起来。
* Eclipse 常用快捷键
Ctrl-D 删除当前行
Shift-上下左右 选择
Shift-Ctrl-左右 选中上一个/下一个单词
Alt-Down/Up 快速移动所选的内容。如果没有选择，那么移动的是当前行
Ctrl-Alt-Down/Up 快速复制所选的内容。如果没有选择，那么复制的是当前行
Ctrl-Z 撤销
Ctrl-W 关闭当前 tab 页
Ctrl-E  快速导航到打开的 tab 页
Ctrl-O 快速显示类中的方法和属性
Ctrl-M 全屏切换
Ctrl-N 新建工程、文件等
Ctrl-X/Ctrl-C/Ctrl-V/Ctrl-A/Ctrl-S
Ctrl-F/Ctrl-H 搜索
Ctrl-T 显示父类子类等所有继承关系
Ctrl-Shift-T  打开某个类
Ctrl-Shift-F 格式化代码
Ctrl-Shift-O 自动管理 import 的包
Del/Home/End

Debug 环境中
F5/F7 跳到函数内层/外层
F6 逐步调试，即进入下一步
F8 Resume，继续运行，直到下一个断点或者结束

