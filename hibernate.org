#+TITLE: Hibernate


* 基本知识
ORM:
: Object-Relationship Mapping
对象，跟数据库，有着某种对应关系
| 类             | 表的结构(MetaData) |
| 实例化的对象   | 每一条数据         |
| 对象的每个属性 | 数据的每个字段     |

面向对象的封装，让我们在编程的过程中用更自然的思维处理问题，
所以在操作数据库的时候，需要把数据库里的数据跟我们创建的对象关联起来。
我们可以手动写代码实现这个过程。
也可以通过一些 ORM 框架去实现。Hibernate 就是其中一种非常优秀的框架。

* 起步
使用 Hibernate 的步骤:

1. 建立 Web 工程
2. 将需要用到的 jar 包，拷贝到 lib 包的下面。一定不要放错位置。也不要缺少关键包。也尽量不要有包的冲突。
3. 创建 hibernate 的配置文件 hibernate.cfg.xml，指定数据库信息、打印sql语句策略等
   #+BEGIN_SRC xml
   <?xml version="1.0" encoding="UTF-8"?>
   <!DOCTYPE hibernate-configuration PUBLIC
   	"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
   	"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
   
   <hibernate-configuration>
     <session-factory>
        <!-- 配置数据库的基本信息 -->
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:orcl</property>
        <property name="hibernate.connection.username">vip</property>
        <property name="hibernate.connection.password">vip</property>
        <property name="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</property>
        
        <!-- 配置 SQL 语句显示或者 DDL 生成的策略 -->
        <property name="hibernate.show_sql">true</property>
        <property name="hibernate.format_sql">true</property>
        <property name="hibernate.hbm2ddl.auto">create</property>

        <!-- 配置一系列的 Mapping 文件。分为 xml/annotation 等方式 -->        
        <mapping resource="hibernate/helloworld/Book.hbm.xml" />
        <mapping class="hibernate.helloworld.Book" />

     </session-factory>
   </hibernate-configuration>
   #+END_SRC
4. 创建实体类 Book.java
	 #+BEGIN_QUOTE
	 注意，要写成 JavaBean 的规范格式。字段用 private 限制，并为每个字段写 getter/setter 方法(property accessor)。

   还要注意，一个实体类，要跟数据库做映射的话，有一个字段是必须的，就是主键，在 hibernate 中，用 @Id 来表示。

   还要注意，一个实体类，必须要有一个无参构造器。如果我们在里面写了带参数的构造器，那一定不要忘记，增加一个默认的无参构造器。
   #+END_QUOTE

5. 创建数据库跟实体类的映射。有两种方式：XML方式、Annotation方式
   1) 创建相关的xml映射文件 Book.hbm.xml
      #+BEGIN_SRC xml
      <?xml version="1.0" encoding="UTF-8"?>
      <!DOCTYPE hibernate-mapping PUBLIC 
          "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
          "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
           
      <hibernate-mapping>
	      <!-- 配置实体类的映射 -->
      	<class name="hibernate.helloworld.Book" table="t_book">
      		<id name="bookno">
      			<generator class="native"></generator>
      		</id>
      		
      		<property name="name"></property>
      		<property name="price"></property>
      	</class>

	      <!-- 在这里，可以添加其他的实体类映射 -->

      </hibernate-mapping>

      #+END_SRC

   2) 在实体类上加相关的注解
      | @Entity 注解         | 用来标识类是一个与数据库关联的实体类。这个注解作用在类上面。                                                                                                                    |
      | @Id 注解             | 让hibernate把当前属性解析为一个主键                                                                                                                                             |
      | @Basic 注解          | 用来表示，让 hibernate 把当前属性解析为一个表的普通字段。要注意，如果有些java基本类型，没有任何注解的话，默认是带有 @Basic 注解的。                                             |
      | @Table 注解          | 用来自定义生成表的详细信息的。作用在类上面。必须要联合 @Entity 注解一起使用。                                                                                                   |
      | @Column 注解         | 用来自定义生成字段的详细信息的。可选的，配合 @Id 或 @Basic 一起使用。                                                                                                                       |
      | @GeneratedValue 注解 | 用来自定义主键的自动生成策略，如果不带任何参数，那么默认的策略是 AUTO，即让 Hibernate 自动选择生成主键值的方法。这个注解要跟 @Id 一起配合使用。一般情况下，这个也是不可或缺的。 |
      | @Transient 注解      | 用来将指定属性排除掉，不进行持久化                                                                                                                                              |
     
6. 在 hibernate.cfg.xml 中添加映射，开始连接
   1) 创建 sessionFactory
      : 他就是一个大内总管，负责初始化 hibernate，并携带所有的配置信息，而且要负责我们跟数据库打交道的一切杂务。
			#+BEGIN_SRC java
      // 加载配置文件
   		Configuration config = new Configuration().configure( "/hibernate/helloworld/hello.cfg.xml");
      // 初始化所有需要的服务
   		ServiceRegistry serviceRegistry = new StandardServiceRegistryBuilder().applySettings(config.getProperties()).build();

			// 在完成 sessionFactory 的创建之前，可以通过 config.addXXX 的方式，动态添加实体类的映射信息
	  	config.addAnnotatedClass(Author.class);
  		config.addResource("hibernate/helloworld/Book.hbm.xml");

      // 创建 sessionFactory 对象
  		SessionFactory sessionFactory = config.buildSessionFactory(serviceRegistry);
			#+END_SRC

   2) 创建 session
   3) 创建 Transaction
   4) 通过 Query 等进行查询；通过 save/delete 等进行增删。
   5) 提交事务，关闭 session，关闭 SessionFactory。



* Load/Get
get 跟 load 的区别如下：
1. 如果查询的数据不存在的话，get 会返回 null；load 会抛出异常。
2. get 是立即从数据库中检索数据； load 是懒加载，即只有当要使用对象的时刻，才进行加载，懒加载是通过代理实现的。


* Session 操作
** session.flush()

是让 hibernate 立即执行 sql 语句，但是并不提交，同时更新session缓存。{即同步 session 里的缓存到数据库（插入，更新，删除等）。}

: 只有在调用了 session.flush() 之后，session缓存里的数据，才会被发送到数据库，进行真正的数据库持久化操作。

以下几种清空可以调用 flush:
1. 我们可以在代码中显式调用。在调用的时候，会向数据库中发送操作指令。
   : session.flush();

2. 我们在调用 commit 的时候，也会隐式调用 flush 方法。
   : session.commit();
   commit() 方法，其实就是简单调用了 session.flush() 和 conn.commit()。所以数据会被同步到数据库，而且，事务会提交。

3. 在执行查询的时候，会隐式调用 flush 方法.
   #+BEGIN_SRC java
   @Test
   public void testFlush() {
  		// 更新缓存
  		Author author = new Author();
  		author.setName("struts....");
  		author.setBirth(new Date());
  		
  		// 数据只是存在于 session 的缓存中
  		session.save(author);

      // 从数据库中进行 query 查询的时候，会触发 flush 语句。  		
  		Query query = session.createQuery("from Author");
  		System.out.println(query.list().size());
  		
  		System.out.println("ssss");
  	}
   #+END_SRC


** session.refresh()

在查询的时候，从数据库中更新数据。

所以 refresh 会触发一次查询操作，保证取到的是跟数据库中一致的数据。


** session.clear()

清空整个的 session 缓存内容。


* 关联映射(Assoc)

在数据库中，存在多张表，表根表之间通过外键的形式进行的关联。

在 Java 中，存在的是多个类，类之间是通过互相引用的形式进行沟通。

ORM 主要是用面向对象的思维去操作数据库。

所以，在操作 Java 中的对象，或者修改对象之间的关系的时候，ORM 框架能够帮我们完成相应的数据库的修改。

我们需要在 Java 中设置类之间的相互关系，ORM 框架（hibernate）才能够正确的进行这种转换。

我们可以通过 xml 或者 annotation 的形式，声明类之间的关系，hibernate 才能正确将这种关系映射到数据库操作上。

目前为止，先模仿，后理解。练习越多，越明白。只看不练，空把式。

** 一对一（主键关联）

[例] IdCard 和 Person 是一对一的关联关系

*XML 的配置方式：*
#+BEGIN_SRC xml
  <!-- 在其中一端，配置 One-To-One 节点 -->
  <one-to-one name="person" class="hibernate.Person" />


  <!-- 在另一端，配置 One-To-One 节点，注意，要加上Constrained="true" -->
  <!-- 而且要配置主键的生成方式为 foreign. -->
  <id name="id" type="int">
    <column name="ID" />
    <generator class="foreign">
      <param name="property">person</param>
    </generator>
  </id>
  <one-to-one name="IdCard" class="hibernate.IdCard" constrained="true" />

#+END_SRC

*Anno 的配置方式：*
#+BEGIN_SRC java
  class Person {
      @OneToOne
      @JoinColumn
      private IdCard idcard;
  }

  class IdCard {
      @OneToOne
      @JoinColumn
      private Person person;
  }
#+END_SRC

** 一对一（外键关联）

*XML 的形式：*
#+BEGIN_SRC xml
  <!-- 在其中一端 ManyToOne 和 unique 配合，产生一对一的结果，生成相应外键 -->
  <many-to-one name="school" class="School" unique="true" />

  <!-- 在另一端 -->
  <one-to-one name="master" class="Master" property-ref="school" />
#+END_SRC

*Anno 的形式：*
#+BEGIN_SRC java
  class Person {
      @OneToOne
      @JoinColumn(mappedBy="person")
      private Card card;
  }

  class Card {
      @ManyToOne
      @JoinColumn(name="cardid")
      private Person person;
  }
#+END_SRC

** 多对一（单向）
#+BEGIN_SRC java
  // 例如，一本书，肯定有一个作者，而 author 属性不是一个简单类型，而是一个对象的引用。
  // 书跟作者是一个多对一的关系，也就是一个作者有多本书
  // 在这种情况之下，我们需要用 @ManyToOne 注解 或者用 <many-to-one /> 标签去定义这个属性跟表字段之间的映射。
  // many-to-one，这个标签的作用是为所在的列，添加一个外键约束。如果不显式指定 column 名字的话，那么默认生成的名字是 属性名_索引的主键名
  @Entity
  class Book {
    @ManyToOne
    private Author author;
  }
#+END_SRC

many-to-one 可以设置 lazy=(false|proxy|no-proxy), fetch=(select|join)。

** 一对多（单向）

比如，Father 和 Son 是一对多关联

*XML 方式：*
#+BEGIN_SRC xml
  <set name="sons" cascade="save-update" lazy="extra" fetch="select">
    <key column="father_id"></key>
    <one-to-many class="Son" />
  </set>
#+END_SRC

lazy 有下面几个选项： false/true/extra。默认是 true。
- 如果设置为 false，那么立即加载，加载的方式是多条 select 语句。
- 如果设置为 true，会启用懒加载。只有在调用 books 的任何方法时，才会去初始化列表，从而触发从数据库中查询图书列表的请求。
- 如果设置为 extra，也会启用懒加载，但是是更加智能化的懒加载。这时候，如果去调用 books.size() 或 books.contains() 等方法时，并不会真正的初始化图书列表。这样能尽可能节省资源。

fetch 有以下几个选项：
- 如果设置了 select，那么，查询的是多条 select 语句。这是默认值。
- 如果设置了 join，那么 lazy 的设置会无效，会变成立即加载。加载的语句为 left join 方式
- 如果设置了 subselect，那么多个查询会尽量合并成子查询形式



*Anno 方式：*

实现一对多的单向关联，只需在代表一的实体中使用 @OneToMany 映射标注，代表多的实体不需要使用任何映射标注。

如果只注明 @OneToMany，会通过建立第三方表来保存关系。如果额外添加 @JoinColumn 标注，则会在多的一方增加一个外键列来保存关系。

通过 cascade 可以设置级联属性；通过 fetch 可以设置是否采用懒加载；通过 @Fetch 注解可以指定查询语句的形式。

#+BEGIN_SRC java
  // 单向关系，只需要在一方加注解即可
  @Entity
  class Father {
      @OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY)
      @JoinColumn("father_id")   // 这一句导致不会出现中间表，并在 son 表中添加名为 father_id 的外键列。
      private Set<Son> sons = new HashSet<Son>();
  }
#+END_SRC

** 一对多（双向）

在JPA规范中，一对多的双向关系只能由多端(Son)来维护。

在代表多的一端(son)，注解 @ManyToOne，并由 @JoinColumn 设置 son 中的关联字段（外键）。\\
在代表一的一端(father)，注解 @OneToMany，并由参数的 mappedBy="father" 属性标注为关系被维护端。

*XML 方式：*
#+BEGIN_SRC xml
  <set name=sons" inverse="true">
    <key column="father_id"></key>
    <one-to-many class="Son" />
  </set>

  <many-to-one name="father" column="father_id" class="Father" />
#+END_SRC

*Anno 方式：*
#+BEGIN_SRC java
  // 主端，多
  @Entity
  class Son {
      @ManyToOne(optional=false)       // optional的意思是，father 不能为空
      @JoinColumn(name="father_id")    // 设置在son表中的关联字段(外键)
      private Father father;
  }

  // 从端，一
  @Entity
  class Father {
      @OneToMany(mappedBy="father", fetch=FetchType.LAZY)
      private Set<Son> sons = new HashSet<Son>();
  }
#+END_SRC

可以看到，生成的只有两张表， SON/FATHER，SON 持有关联到 FATHER 的外键。

首先，必须要保证 上面的 column 跟下面的 column 要一致，否则，会在创建表的时候，生成重复的字段，产生不必要的问题。

其次，要在 set 上面配置 inverse="true"，否则，会在生成语句的时候，产生很多很多的冗余。在一对多双向关系中，一般情况下，要在多的一边设置 inverse。

还要注意，在保存的时候，要先保存 1 的一方，否则，会产生很多不必要的 update 语句，从而影响效率。

** 多对多（双向）
JPA中使用 @ManyToMany 来注解多对多的关系，由一个关联表来维护。可以指定某一方为关系维护者。

多对多关系中一般不设置级联操作。

如果已经绑定了多对多的关系，不能直接删除从断，需要主端解除绑定再删除。但可以直接删除主端。

#+BEGIN_SRC java
  @Entity
  class Player {
    @ManyToMany
    @JoinTable(name="player_game", joinColumns=@JoinColumn(name="player_id"), inverseJoinColumns=@JoinColumn(name="game_id"))
    // 关系维护端，负责多对多关系的绑定和解除
    // 可以不指定 @JoinTable，那么中间表、外键名等就会采用默认值
    private Set<Game> games = new HashSet<>();
  }


  @Entity
  class Game {
    @ManyToMany(mappedBy="games")
    private Set<Player> players = new HashSet<>();
  }

#+END_SRC

* 继承(Inheritance)
开发的时候用的不是特别多。
** subclass
#+BEGIN_SRC java
  @Inheritance(strategy=InheritanceType.SINGLE_TABLE)
  @DiscriminatorColumn(name="xxx")
  @DiscriminatorValue(value="e")
  class Dog extents Animal { ... }
#+END_SRC

特点：
- 只有一张表，查询快速
- 使用了区别列
- 子类独有列不能添非空约束
- 继承层次深则冗余字段很多

** joined-class
#+BEGIN_SRC java
  @Inheritance(strategy=InheritanceType.JOINED)
  @Entity
  @PrimaryKeyJoinColumn(name="xxx")
  class Dog extents Animal { ... }
#+END_SRC

特点：
- 查询父类记录，做一个左连接查询
- 查询子记录，做一个内联接查询
- 查询效率略低
- 没有冗余的字段

** union-subclass
#+BEGIN_SRC java
  @Inheritance(strategy=InheritanceType.TABLE_PER_CLASS)
#+END_SRC

特点：
- 每个实现类都有一个独立的表
- 查子类不错，查父类需要union
- 但存在冗余字段
- 若更新父表的字段，效率较低
* 级联（Cascade）

在利用 hibernate 对实体类对象进行持久化(如 session.save)的时候，需要保证里面引用的对象已经处于持久化状态。

否则，会出现以下异常
: org.hibernate.TransientObjectException: object references an unsaved transient instance - save the transient instance before flushing: hibernate.assoc.many2one.Author

解决方案有以下两种：
1. 在保存对象前，对所有引用到的对象先执行持久化操作。
2. 在实体类中，为这些引用到的对象，设置合适的级联属性。这样的话，hibernate 会在保存对象的时候，自动将引用到的还没有持久化的对象进行持久化。

级联可以通过注解的形式进行配置，也可以通过 XML 的形式进行配置。
: @ManyToOne(cascade=CascadeType.PERSIST)
: <many-to-one cascade="save-update" />

大抵有如下几种：
: none：在保存，删除或修改当前对象时，不对其附属对象（关联对象）进行级联操作，它是默认值。 
: save-update：在保存，更新当前对象时，级联保存，更新附属对象（临时对象、游离对象）。 
: delete：在删除当前对象时，级联删除附属对象。 
: all：所有情况下均进行级联操作，即包含 save-update 和 delete 操作


在我们的开发环境中，设置好 cascade 会让我们的代码更整洁，测试更方便。但是，在工业环境中，不建议使用任何 cascade 设置。

* 检索策略

把握的原则是：
1. 不浪费内存
2. 更高的效率。(如尽量少的sql语句)

类级别的检索策略：
- 分为立即检索 和 延迟检索
- 类级别检索策略可以通过<class>的 lazy 属性进行控制
- class 的 lazy 仅对 load() 方法有效
- 延迟检索返回的是代理对象。所以注意不要发生懒加载异常。
- class 的 batch-size，全局批量模式

<set>元素的检索策略：
- lazy，决定集合被初始化的时机，true/false/extra
- Hibernate.initialize() 调用代码显式初始化
- fetch 的选项有："select"，"subselect"，"join"，它们决定查询的形式和时机
- 若把 fetch 设置为 subselect，会通过子查询的方式来初始化所有 set 集合。
  子查询作为 where 的 in 条件出现。此时 lazy 有效，batch-size 失效。
- 若把 fetch 设置为 join，迫切使用左连接，lazy 会失效。
- hql 查询会忽略 fetch=join 的取值
- batch-size，设定批量查询数量，用于减少 select 次数、提高检索性能
- order-by 在查询时对集合中的元素进行排序，使用的是表的字段名。会在 sql 语句中添加 order by 段。

<many-to-one>的检索策略:
- lazy 取值 proxy/no-proxy/false

<property /> 的检索策略:
- lazy 取值 true/false

* 检索方式
** HQL
- 基本用法
- 分页查询
- 投影查询
- NamedQuery
- 内外连接
** QBC
** SQLQuery
- 基本语法
- 增加条件（addScalar）
- 返回结果（addEntity）
* 二级缓存
1. 加入 hibernate-ehcache.jar 及关联包
2. 创建/复制 ehcachexml 到类路径
3. 配置 hibernate.cfg.xml
   : <property name="cache.user_second_level_cache">true</property>
   : <property name="cache.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</property>
4. 配置要被缓存的类
   - 在 hibernate.cfg.xml 中配置
     : <class-cache usage="read-only" class="ccc.hibernate.cache.Employee"/>
   - 在 .hbm.xml 中添加
     : <cache usage="read-only"/>
   - 在类或集合上添加
     : @Cache(usage=CacheConcurrencyStrategy.READ_WRITE)


* 乐观锁、悲观锁

